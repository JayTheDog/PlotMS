name: CI

on: [push, pull_request]

env:
  BUILD_DIR: _build
  DIST_DIR: _dist
  PIP_PACKAGES: >-
    meson==0.58.0
    cmake
    ninja
    gcovr
  MACOS_BASEKIT_URL: >-
    https://registrationcenter-download.intel.com/akdlm/irc_nas/17969/m_BaseKit_p_2021.3.0.3043.dmg
  MACOS_HPCKIT_URL: >-
    https://registrationcenter-download.intel.com/akdlm/irc_nas/17890/m_HPCKit_p_2021.3.0.3226_offline.dmg
  LINUX_INTEL_COMPONENTS: >-
    intel-oneapi-compiler-fortran-2022.1.0
    intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic-2022.1.0
    intel-oneapi-mkl-2022.1.0
    intel-oneapi-mkl-devel-2022.1.0

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        build: [meson]
        build-type: [debug]
        compiler: [intel]
        version: [2021]
        include:
          - os: ubuntu-latest
            build: meson
            build-type: debug
            compiler: gnu
            version: 11
          - os: ubuntu-latest
            build: meson
            build-type: debug
            compiler: gnu
            version: 9

    env:
      FC: ${{ matrix.compiler == 'intel' && 'ifort' || 'gfortran' }}
      CC: ${{ matrix.compiler == 'intel' && 'icc' || 'gcc' }}
      GCC_V: ${{ matrix.version }}
      PYTHON_V: 3.8

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_V }}

      - name: Install GCC (Linux, GNU)
        if: matrix.compiler == 'gnu'
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt-get update
          sudo apt-get install -y gcc-${{ env.GCC_V }} gfortran-${{ env.GCC_V }}
          sudo update-alternatives \
            --install /usr/bin/gcc gcc /usr/bin/gcc-${{ env.GCC_V }} 100 \
            --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${{ env.GCC_V }}

      - name: Prepare Intel cache
        if: matrix.compiler == 'intel'
        run: |
          sudo mkdir -p /opt/intel
          sudo chown $USER /opt/intel

      - name: Cache Intel install
        id: cache-intel
        if: matrix.compiler == 'intel'
        uses: actions/cache@v4
        with:
          path: /opt/intel/oneapi
          key: install-intel-${{ matrix.version }}-${{ matrix.os }}-2022.1.0-${{ github.run_number }}


      - name: Install Intel oneAPI
        if: matrix.compiler == 'intel' && steps.cache-intel.outputs.cache-hit != 'true'
        run: |
          wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
          sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
          rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
          echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt-get update
          sudo apt-get install -y ${{ env.LINUX_INTEL_COMPONENTS }}

      - name: Source Intel env
        if: matrix.compiler == 'intel'
        run: |
          source /opt/intel/oneapi/setvars.sh
          echo "FC=ifort" >> $GITHUB_ENV
          echo "CC=icc" >> $GITHUB_ENV

      - name: Install Python deps
        run: pip3 install ${{ env.PIP_PACKAGES }}

      - name: Configure build (Meson)
        run: |
          rm -rf ${{ env.BUILD_DIR }} ${{ env.DIST_DIR }}
          meson setup ${{ env.BUILD_DIR }} \
            --buildtype=${{ matrix.build-type }} \
            --prefix=$PWD/${{ env.DIST_DIR }} \
            --libdir=lib \
            --warnlevel=0 \
            ${{ matrix.compiler == 'intel' && '-Dfortran_link_args=-qopenmp' || '' }}

      - name: Build
        run: ninja -C ${{ env.BUILD_DIR }}

      - name: Test
        run: |
          meson test -C ${{ env.BUILD_DIR }} --print-errorlogs --no-rebuild --num-processes 1 -t 2

      - name: Install
        run: meson install -C ${{ env.BUILD_DIR }} --no-rebuild

      - name: Package
        run: |
          tar cJvf plotms-${{ matrix.compiler }}-${{ matrix.version }}.tar.xz -C ${{ env.DIST_DIR }} .

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: plotms-${{ matrix.compiler }}-${{ matrix.version }}
          path: plotms-${{ matrix.compiler }}-${{ matrix.version }}.tar.xz
