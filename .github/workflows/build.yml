name: CI

on: [push, pull_request]

env:
  BUILD_DIR: _build
  DIST_DIR: _dist
  PIP_PACKAGES: >-
    meson==0.58.0
    cmake
    ninja
    gcovr
  LINUX_INTEL_COMPONENTS: >-
    intel-oneapi-compiler-fortran-2022.1.0
    intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic-2022.1.0
    intel-oneapi-mkl-2022.1.0
    intel-oneapi-mkl-devel-2022.1.0

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        build: [meson]
        build-type: [debug]
        compiler: [intel]
        version: [2021]
        include:
          - os: ubuntu-latest
            build: meson
            build-type: debug
            compiler: gnu
            version: 11
          - os: ubuntu-latest
            build: meson
            build-type: debug
            compiler: gnu
            version: 9

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8

    - name: Install GCC (Linux, GNU)
      if: matrix.compiler == 'gnu'
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        sudo apt-get update
        sudo apt-get install -y gcc-${{ matrix.version }} gfortran-${{ matrix.version }}
        sudo update-alternatives \
          --install /usr/bin/gcc gcc /usr/bin/gcc-${{ matrix.version }} 100 \
          --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${{ matrix.version }}

    - name: Prepare Intel cache
      if: matrix.compiler == 'intel'
      run: |
        sudo mkdir -p /opt/intel
        sudo chown $USER /opt/intel

    - name: Cache Intel install
      if: matrix.compiler == 'intel'
      id: cache-install
      uses: actions/cache@v4
      with:
        path: /opt/intel/oneapi
        key: install-intel-${{ matrix.os }}-2022.1.0-fix

    - name: Install Intel oneAPI
      if: matrix.compiler == 'intel' && steps.cache-install.outputs.cache-hit != 'true'
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update
        sudo apt-get install -y ${{ env.LINUX_INTEL_COMPONENTS }}

    - name: Install Python packages
      run: pip3 install ${{ env.PIP_PACKAGES }}

    - name: Debug compilers
      run: |
        echo "PATH=$PATH"
        if [ "${{ matrix.compiler }}" = "intel" ]; then
          source /opt/intel/oneapi/setvars.sh
          echo "==== ifort location ===="
          which ifort || echo "ifort NOT found"
          ifort --version || echo "ifort failed"
          echo "==== icc location ===="
          which icc || echo "icc NOT found"
          icc --version || echo "icc failed"
        else
          echo "==== gfortran location ===="
          which gfortran
          gfortran --version
        fi

    - name: Configure build (Meson)
      run: |
        if [ "${{ matrix.compiler }}" = "intel" ]; then
          source /opt/intel/oneapi/setvars.sh
        fi
        rm -rf ${{ env.BUILD_DIR }} ${{ env.DIST_DIR }}
        meson setup ${{ env.BUILD_DIR }} \
          --buildtype=${{ matrix.build-type }} \
          --prefix=$PWD/${{ env.DIST_DIR }} \
          --libdir=lib \
          --warnlevel=0 \
          ${{ matrix.compiler == 'intel' && '-Dfortran_link_args=-qopenmp' || '' }}

    - name: Dump Meson log on failure
      if: failure()
      run: |
        echo "=== Meson full log ==="
        cat ${{ env.BUILD_DIR }}/meson-logs/meson-log.txt || echo "No Meson log found"

    - name: Build
      run: ninja -C ${{ env.BUILD_DIR }}

    - name: Test
      run: meson test -C ${{ env.BUILD_DIR }} --print-errorlogs --no-rebuild --num-processes 1 -t 2

    - name: Install
      run: meson install -C ${{ env.BUILD_DIR }} --no-rebuild

    - name: Package
      run: tar cJvf plotms-${{ matrix.compiler }}-${{ matrix.version }}.tar.xz -C ${{ env.DIST_DIR }} .

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: plotms-${{ matrix.compiler }}-${{ matrix.version }}
        path: plotms-${{ matrix.compiler }}-${{ matrix.version }}.tar.xz
